name: bridgecommandAppImageBuild

on: workflow_dispatch

jobs:

  build-and-test:
    strategy:
      matrix:
        include:
          - ARCH: x86_64
            RUNS_ON: ubuntu-22.04
            BUILD_TYPE: appimage
          - ARCH: aarch64
            RUNS_ON: ubuntu-22.04-arm
            BUILD_TYPE: appimage
      fail-fast: false

    name: SNIS ${{ matrix.BUILD_TYPE }} ${{ matrix.ARCH }}
    runs-on: ${{ matrix.RUNS_ON }}
    
    env:
      ARCH: ${{ matrix.ARCH }}
      BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
      # make sure to always(!) pull the base image
      UPDATE: 1
      
    steps:
    - uses: actions/checkout@v4

    - name: get linuxdeploy-x86_64.AppImage
      if: ${{ matrix.ARCH == 'x86_64' }} 
      run: |      
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        mv linuxdeploy-x86_64.AppImage linuxdeploy.AppImage
        chmod +x linuxdeploy.AppImage  
    - name: get linuxdeploy-aarch64.AppImage
      if: ${{ matrix.ARCH == 'aarch64' }}
      run: |
        #wget https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20250213-2/linuxdeploy-aarch64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-aarch64.AppImage
        mv linuxdeploy-aarch64.AppImage linuxdeploy.AppImage
        chmod +x linuxdeploy.AppImage  

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        sudo apt-get update
        #sudo apt-get install libopencv-dev
        sudo apt-get install cmake mesa-common-dev libxxf86vm-dev freeglut3-dev libxext-dev libxcursor-dev portaudio19-dev libsndfile1-dev libopenxr-dev
        sudo apt install libfuse2
        git clone --depth 1 https://github.com/bridgecommand/bc.git
        cd bc/bin
        cmake ../src

    - name: Find version
      run : echo "bc_version=$(./bridgecommand --version)" >> $GITHUB_ENV

    - name: Build
      # Build your program with the given configuration
      run: |
        cd bc/bin
        make
        #./bridgecommand --version
        cd ../../
        mkdir -p AppDir/usr/bin
        cp -r bc/bin AppDir/usr
        #can clean up AppDir/usr/bin first if we like
        rm -r AppDir/usr/bin/BridgeCommand.app
        rm -r AppDir/usr/bin/CMakeFiles
        rm -r AppDir/usr/bin/controller
        rm -r AppDir/usr/bin/createDeb
        rm -r AppDir/usr/bin/editor
        rm -r AppDir/usr/bin/iniEditor
        rm -r AppDir/usr/bin/launcher
        rm -r AppDir/usr/bin/libs
        rm -r AppDir/usr/bin/multiplayerHub
        rm -r AppDir/usr/bin/repeater
        rm -r AppDir/usr/bin/*.exe
        rm -r AppDir/usr/bin/*.dll
        #get our preconfiged files
        git clone --depth 1 https://github.com/vpelss/bridgecommand_AppImage.git
        cp bridgecommand_AppImage/AppRun AppDir
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/128x128/apps
        cp bridgecommand_AppImage/bridgecommand.desktop AppDir/usr/share/applications
        cp bridgecommand_AppImage/bridgecommand.png AppDir/usr/share/icons/hicolor/128x128/apps
        chmod +x AppDir/AppRun
        # 3. create our AppImage file
        #run linuxdeploy and fix up generate an AppDir (add lib) and build AppImage 
        ARCH=${{ matrix.ARCH }} ./linuxdeploy.AppImage -v 1 --appdir AppDir --deploy-deps-only=$AppDir/usr/bin --output appimage
        mv Bridge_Command-${{ matrix.ARCH }}.AppImage Bridge_Command-${{ env.bc_version }}-${{ matrix.ARCH }}.AppImage
        chmod 777 Bridge_Command-${{ env.bc_version }}-${{ matrix.ARCH }}.AppImage
       
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Bridge_Command-${{ env.bc_version }}-${{ matrix.ARCH }}.AppImage 
        path: Bridge_Command-${{ env.bc_version }}-${{ matrix.ARCH }}.AppImage

    - name: upload binaries to release
      uses: softprops/action-gh-release@v2
      #if: ${{startsWith(github.ref, 'refs/tags/') }}
      with:
          tag_name: "Download"
          files: Bridge_Command-${{ env.bc_version }}-${{ matrix.ARCH }}.AppImage  
